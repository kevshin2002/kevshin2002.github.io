"use strict";(self.webpackChunkkevshin2002=self.webpackChunkkevshin2002||[]).push([[9397],{9647:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>c,default:()=>p,frontMatter:()=>o,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"Robotics/ROS2/ros2","title":"ROS2","description":"This has not been proof-read or modified for simpler reading yet.","source":"@site/docs/Robotics/ROS2/index.mdx","sourceDirName":"Robotics/ROS2","slug":"/Robotics/ROS2/","permalink":"/docs/Robotics/ROS2/","draft":false,"unlisted":false,"tags":[{"inline":false,"label":"C++","permalink":"/docs/tags/cpp","description":"C++"},{"inline":false,"label":"Python","permalink":"/docs/tags/python","description":"Python"},{"inline":false,"label":"Rust","permalink":"/docs/tags/rust","description":"Rust"},{"inline":false,"label":"Robotics","permalink":"/docs/tags/robotics","description":"All things related to robotics and automation"}],"version":"current","lastUpdatedAt":1734508800000,"sidebarPosition":1,"frontMatter":{"id":"ros2","title":"ROS2","hide_title":true,"sidebar_position":1,"tags":["cpp","python","rust","robotics"],"last_update":{"date":"12/18/2024","author":"Kevin Shin"}},"sidebar":"noteSidebar","previous":{"title":"Machine Learning","permalink":"/docs/Machine-Learning/"},"next":{"title":"Nav2","permalink":"/docs/Robotics/ROS2/nav2"}}');var s=t(4848),r=t(8453),i=t(9489),l=t(7227);const o={id:"ros2",title:"ROS2",hide_title:!0,sidebar_position:1,tags:["cpp","python","rust","robotics"],last_update:{date:"12/18/2024",author:"Kevin Shin"}},c=void 0,u={},d=[{value:"Packages",id:"packages",level:2},{value:"Creating a Package",id:"creating-a-package",level:3},{value:"Launch Files",id:"launch-files",level:3},{value:"Source Files",id:"source-files",level:3},{value:"CMakeLists and setup file",id:"cmakelists-and-setup-file",level:3},{value:"Topics",id:"topics",level:2},{value:"Publishers",id:"publishers",level:3},{value:"Object Oriented Programming",id:"object-oriented-programming",level:3}];function h(e){const n={admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.admonition,{type:"danger",children:[(0,s.jsx)(n.p,{children:"This has not been proof-read or modified for simpler reading yet."}),(0,s.jsx)(n.p,{children:"12/23/24"})]}),"\n",(0,s.jsx)(n.h2,{id:"packages",children:"Packages"}),"\n",(0,s.jsx)(n.p,{children:"Packages are how ROS2 organizes programs. It contains all of the source code written in C++/Python, configuration, compilation, launch, and parameter files. It allows easier as well sharing as everything is packaged. In ROS2, you can make CMake packages and Python packages."}),"\n",(0,s.jsx)(n.p,{children:"All CMake packages must have the following folders and files:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"launch"})," folder: Contains all of the launch files"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"src"})," folder: Contains all of the source code (C++/Python)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"CMakeLists.txt"}),": Contains the rules for compiling the C++ source code"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"package.xml"}),": Contains all of the package metadata and dependencies needed by the package at runtime and compiletime"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"creating-a-package",children:"Creating a Package"}),"\n",(0,s.jsx)(n.p,{children:"We can create packages by running the command below:"}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsxs)(n.p,{children:["Always create packages inside of the src folder within your ROS2 workspace.\nGenerally, that path is ",(0,s.jsx)(n.code,{children:"~/ros2_ws/src"}),"."]})}),"\n",(0,s.jsxs)(i.A,{children:[(0,s.jsx)(l.A,{value:"C++",label:"C++",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"ros2 pkg create <package_name> --build-type ament_cmake --dependencies rclcpp <package_dependencies>\n# rclcpp is the ros core library for cpp\n"})})}),(0,s.jsx)(l.A,{value:"Python",label:"Python",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"ros2 pkg create <package_name> --build-type ament_python --dependencies rclpy <package_dependencies>\n# rclpy is the ros core library for python\n"})})}),(0,s.jsx)(l.A,{value:"Rust",label:"Rust"})]}),"\n",(0,s.jsx)(n.p,{children:"You can then compile it to ensure there are no dependency conflicts using the command:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"colcon build # Compiles all packages within your workspace\ncolcon build --packages-select <package_name> # Compiling one package\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Source the workspace script ",(0,s.jsx)(n.code,{children:"setup.bash"})," within ",(0,s.jsx)(n.code,{children:"~/ros2_ws/install"})," to update environment variables. This ensures ROS2 has the newly created package.\nAnytime you make a change within the package, you ",(0,s.jsx)(n.strong,{children:"must"})," recompile the package and re-source the script."]}),"\n",(0,s.jsx)(n.p,{children:"You can run the command below to see your new package:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"ros2 pkg list\nros2 pkg list | grep <package_name> # Filters the list using <package_name>\n"})}),"\n",(0,s.jsx)(n.h3,{id:"launch-files",children:"Launch Files"}),"\n",(0,s.jsxs)(n.p,{children:["On a basic level, launch files allow you to start up multiple nodes without having start up multiple terminals. The launch file follows the general structure below and must be stored inside of ",(0,s.jsx)(n.code,{children:"<my_package>/launch"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"## File name conventionally follows the format of *.launch.py\nfrom launch import LaunchDescription\nfrom launch_ros.actions import Node\n\n## Function name must be generate_launch_description\n## Everything else within body is up to user\ndef generate_launch_description():\n    return LaunchDescription([\n        Node(\n            package='teleop_twist_keyboard', # Specifies which package the binary is in\n            executable='teleop_twist_keyboard', # Specifies the binary\n            output='screen', # Specifies what channel to output the results of the binary\n            emulate_tty=True), # Outputs colored logging messages\n    ])\n"})}),"\n",(0,s.jsxs)(n.p,{children:["We then have to modify our ",(0,s.jsx)(n.code,{children:"setup.py"})," file so that the ROS2 environment can find and access the ",(0,s.jsx)(n.code,{children:".launch.py"})," files. All we do is add and modify these 3 lines of code."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"import os\nfrom glob import glob\n\ndata_files=[\n        ('share/ament_index/resource_index/packages',\n            ['resource/' + package_name]),\n        ('share/' + package_name, ['package.xml']),\n        (os.path.join('share', package_name), glob('launch/*.launch.py'))\n    ],\n"})}),"\n",(0,s.jsx)(n.p,{children:"You can then run the launch files by first giving it execution permissions and then launching it:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"chmod +x <launch_file>.launch.py\nros2 launch <package_name> <launch_file>.launch.py\n"})}),"\n",(0,s.jsx)(n.h3,{id:"source-files",children:"Source Files"}),"\n",(0,s.jsxs)(n.p,{children:["We can create source files within ",(0,s.jsx)(n.code,{children:"<my_package>/src"}),'. The way you structure your source code is dependent on you and can follow object oriented programming, functional, procedural, or whatever coding paradigm you want to use. Generally though, the best practice is to modularize one "node" per source file.']}),"\n",(0,s.jsxs)(i.A,{children:[(0,s.jsx)(l.A,{value:"C++",label:"C++",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'#include "rclcpp/rclcpp.hpp"\n\nint main(int argc, char \\* argv[])\n{\n// Initialize the ROS2 communication\nrclcpp::init(argc, argv);\n\n// Create a ROS2 node\nauto theNode = rclcpp::Node::make_shared("beginner");\n\n// Print a message to the terminal\nRCLCPP_INFO(theNode->get_logger(), "I\'m writing to the terminal!");\n\n// Shutdown the ROS2 communication\nrclcpp::shutdown();\nreturn 0;\n}\n\n'})})}),(0,s.jsx)(l.A,{value:"Python",label:"Python",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"#!/usr/bin/env python\nimport rclpy\n\ndef main(args=None):\n    rclpy.init(args=args)\n    print(\"Hey, this node is printing!\")\n    rclpy.shutdown()\n\nif __name__ == '__main__':\n    main()\n"})})}),(0,s.jsx)(l.A,{value:"Rust",label:"Rust"})]}),"\n",(0,s.jsx)(n.h3,{id:"cmakelists-and-setup-file",children:"CMakeLists and setup file"}),"\n",(0,s.jsx)(n.p,{children:"Since we created a source file, we need to tell the build system (colcon) how to compile our files. We can do so by modifying our CMakeLists.txt and setup.py found within the root of our package folder."}),"\n",(0,s.jsxs)(i.A,{children:[(0,s.jsx)(l.A,{value:"C++",label:"C++",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-txt",children:"add_executable(simple_node src/simple.cpp) # Generate a binary executable with name simple_node from src/simple.cpp\nament_target_dependencies(simple_node rclcpp) # Specify which dependencies the binary requires for compiling and usage\n\n# Store the binaries within the path lib/${PROJECT_NAME}\n\ninstall(TARGETS\nsimple_node\nDESTINATION lib/${PROJECT_NAME}\n)\n\n# Store the launch files within the path share/${PROJECT_NAME}\n\ninstall(DIRECTORY\nlaunch\nDESTINATION share/${PROJECT_NAME}/\n)\n\n"})})}),(0,s.jsx)(l.A,{value:"Python",label:"Python",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:" entry_points={\n        'console_scripts': [\n            '<executable_name> = <package_name>.<file_name>:<function_name>'\n        ],\n"})})}),(0,s.jsx)(l.A,{value:"Rust",label:"Rust"})]}),"\n",(0,s.jsxs)(n.p,{children:["Once we compile our package, we can see our new node using ",(0,s.jsx)(n.code,{children:"ros2 node list"})," For more information about a node, we can use ",(0,s.jsx)(n.code,{children:"ros2 node info /<package_name>"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"topics",children:"Topics"}),"\n",(0,s.jsxs)(n.p,{children:["Topics are communication channels that nodes use to exchange messages. To see available topics, we can use ",(0,s.jsx)(n.code,{children:"ros2 topic list"}),". For more information about a topic, we can use ",(0,s.jsx)(n.code,{children:"ros2 topic info <topic_name>"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"publishers",children:"Publishers"}),"\n",(0,s.jsx)(n.p,{children:"Publishers are nodes that continuously send out messages to a topic channel at a specific frequency. We can create a very trivial publisher below that counts at rate of 10 Hz."}),"\n",(0,s.jsxs)(i.A,{children:[(0,s.jsx)(l.A,{value:"C++",label:"C++",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'// Import all the necessary ROS libraries and import the Int32 message from the std_msgs package\n#include "rclcpp/rclcpp.hpp"\n#include "std_msgs/msg/int32.hpp"\n\nint main(int argc, char \\* argv[])\n{\nrclcpp::init(argc, argv);\n\nauto theNode = rclcpp::Node::make_shared("counter_publisher");\n\n// We tell the node to create a publisher at the topic /counter using the type Int32\n// Specify the queue (buffer) to only be of size 10.\nauto thePublisher = node->create_publisher<std_msgs::msg::Int32>("counter", 10);\n// We create the message we want to send to the channel.\nauto theMessage = std::make_shared<std_msgs::msg::Int32>();\ntheMessage->data = 0;\n// Publish at 10 Hz\nrclcpp::WallRate loop_rate(std::chrono::milliseconds(100));\n\n// Continuously execute until program stops or exits via user command\nwhile (rclcpp::ok()) {\nthePublisher->publish(\\*message);\ntheMessage->data++;\n// Execute the node and process the messages in the queue until there\'s nothing left in original queue.\nrclcpp::spin_some(node);\n// We ensure the publish rate stays at 10 Hz by sleeping here.\nloop_rate.sleep();\n}\n\nrclcpp::shutdown();\nreturn 0;\n}\n\n'})})}),(0,s.jsx)(l.A,{value:"Python",label:"Python",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:"import rclpy\nfrom std_msgs.msg import Int32\nfrom time import sleep\n\ndef main():\n    rclpy.init()\n    theNode = rclpy.create_node('counter_publisher')\n    thePublisher = node.create_publisher(Int32, 'counter', 10)\n    count = 0\n\n    while rclpy.ok():\n        theMessage = Int32()\n        theMessage.data = count\n        thePublisher.publish(theMessage)\n        count += 1\n        sleep(0.1)\n\n    node.destroy_node()\n    rclpy.shutdown()\n\nif __name__ == '__main__':\n    main()\n"})})}),(0,s.jsx)(l.A,{value:"Rust",label:"Rust"})]}),"\n",(0,s.jsxs)(n.p,{children:["We can launch and compile the package and run ",(0,s.jsx)(n.code,{children:"ros2 topic echo /counter"})," to see that it is indeed counting."]}),"\n",(0,s.jsx)(n.h3,{id:"object-oriented-programming",children:"Object Oriented Programming"}),"\n",(0,s.jsx)(n.p,{children:"We've made all of our source code using basic logic and control flow. A better way, however, is to use OOP principles to ensure cleaner and modular code. We can take the publisher code and create an object below. I won't be going into OOP here since this is primarily a ROS2 note."}),"\n",(0,s.jsxs)(i.A,{children:[(0,s.jsx)(l.A,{value:"C++",label:"C++",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'#include "rclcpp/rclcpp.hpp"\n#include "std_msgs/msg/int32.hpp"\n#include <chrono>\n\nclass SimplePublisher : public rclcpp::Node\n{\npublic:\nSimplePublisher() : Node("simple_publisher"), count(0){\nthePublisher = this->create_publisher<std_msgs::msg::Int32>("counter", 10);\ntheTimer = this->create_wall_timer(std::chrono_milliseconds(500), std::bind(&SimplePublisher::timer_callback, this));\n}\n\nprotected:\nvoid timer_callback(){\nauto theMessage = std_msgs::msg::Int32();\ntheMessage.data = count;\ncount++;\nthePublisher->publish(theMessage);\n}\n\nprivate:\nrclcpp::TimerBase::SharedPtr theTimer;\nrclcpp::Publisher<std_msgs::msg::Int32>::SharedPtr thePublisher;\nsize_t count;\n};\n\nint main(int argc, char \\* argv[])\n{\nrclcpp::init(argc, argv);\nrclcpp::spin(std::make_shared<SimplePublisher>());\nrclcpp::shutdown();\nreturn 0;\n}\n\n'})})}),(0,s.jsx)(l.A,{value:"Python",label:"Python",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:"#!/usr/bin/env python\n\nimport rclpy\nfrom rclpy.node import Node\nfrom std_msgs.msg import Int32\n\nclass CounterNode(Node):\n    def __init__(self):\n        super().__init__('counter_publisher')\n        count = 0\n\n        self.publisher = self.create_publisher(Int32, 'counter', 10)\n        timer_period = 0.1\n        self.timer = self.create_timer(timer_period, self.timer_callback)\n\n    def timer_callback(self):\n        theMessage = Int32()\n        theMessage.data = count\n        count++;\n        thePublisher->publish(theMessage)\n\ndef main(args=None):\n    rclpy.init(args=args)\n    thePublisher = CounterNode()\n    rclpy.spin(thePublisher)\n    thePublisher.destroy_node()\n    rclpy.shutdown()\n\nif __name__ == '__main__':\n    main()\n"})})}),(0,s.jsx)(l.A,{value:"Rust",label:"Rust"})]})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},7227:(e,n,t)=>{t.d(n,{A:()=>i});t(6540);var a=t(4164);const s={tabItem:"tabItem_Ymn6"};var r=t(4848);function i(e){let{children:n,hidden:t,className:i}=e;return(0,r.jsx)("div",{role:"tabpanel",className:(0,a.A)(s.tabItem,i),hidden:t,children:n})}},9489:(e,n,t)=>{t.d(n,{A:()=>v});var a=t(6540),s=t(4164),r=t(4245),i=t(6347),l=t(6494),o=t(2814),c=t(5167),u=t(9900);function d(e){return a.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:n,children:t}=e;return(0,a.useMemo)((()=>{const e=n??function(e){return d(e).map((e=>{let{props:{value:n,label:t,attributes:a,default:s}}=e;return{value:n,label:t,attributes:a,default:s}}))}(t);return function(e){const n=(0,c.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function p(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function m(e){let{queryString:n=!1,groupId:t}=e;const s=(0,i.W6)(),r=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,o.aZ)(r),(0,a.useCallback)((e=>{if(!r)return;const n=new URLSearchParams(s.location.search);n.set(r,e),s.replace({...s.location,search:n.toString()})}),[r,s])]}function g(e){const{defaultValue:n,queryString:t=!1,groupId:s}=e,r=h(e),[i,o]=(0,a.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!p({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const a=t.find((e=>e.default))??t[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:n,tabValues:r}))),[c,d]=m({queryString:t,groupId:s}),[g,b]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[s,r]=(0,u.Dv)(t);return[s,(0,a.useCallback)((e=>{t&&r.set(e)}),[t,r])]}({groupId:s}),f=(()=>{const e=c??g;return p({value:e,tabValues:r})?e:null})();(0,l.A)((()=>{f&&o(f)}),[f]);return{selectedValue:i,selectValue:(0,a.useCallback)((e=>{if(!p({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);o(e),d(e),b(e)}),[d,b,r]),tabValues:r}}var b=t(1062);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var x=t(4848);function y(e){let{className:n,block:t,selectedValue:a,selectValue:i,tabValues:l}=e;const o=[],{blockElementScrollPositionUntilNextRender:c}=(0,r.a_)(),u=e=>{const n=e.currentTarget,t=o.indexOf(n),s=l[t].value;s!==a&&(c(n),i(s))},d=e=>{let n=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{const t=o.indexOf(e.currentTarget)+1;n=o[t]??o[0];break}case"ArrowLeft":{const t=o.indexOf(e.currentTarget)-1;n=o[t]??o[o.length-1];break}}n?.focus()};return(0,x.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.A)("tabs",{"tabs--block":t},n),children:l.map((e=>{let{value:n,label:t,attributes:r}=e;return(0,x.jsx)("li",{role:"tab",tabIndex:a===n?0:-1,"aria-selected":a===n,ref:e=>o.push(e),onKeyDown:d,onClick:u,...r,className:(0,s.A)("tabs__item",f.tabItem,r?.className,{"tabs__item--active":a===n}),children:t??n},n)}))})}function _(e){let{lazy:n,children:t,selectedValue:r}=e;const i=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=i.find((e=>e.props.value===r));return e?(0,a.cloneElement)(e,{className:(0,s.A)("margin-top--md",e.props.className)}):null}return(0,x.jsx)("div",{className:"margin-top--md",children:i.map(((e,n)=>(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==r})))})}function j(e){const n=g(e);return(0,x.jsxs)("div",{className:(0,s.A)("tabs-container",f.tabList),children:[(0,x.jsx)(y,{...n,...e}),(0,x.jsx)(_,{...n,...e})]})}function v(e){const n=(0,b.A)();return(0,x.jsx)(j,{...e,children:d(e.children)},String(n))}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>l});var a=t(6540);const s={},r=a.createContext(s);function i(e){const n=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);