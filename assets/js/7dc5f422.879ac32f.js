"use strict";(self.webpackChunkkevshin2002=self.webpackChunkkevshin2002||[]).push([[3024],{6511:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>c,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>u});const s=JSON.parse('{"id":"Robotics/ROS2/testing-ros2","title":"Testing","description":"This has not been proof-read or modified for simpler reading yet.","source":"@site/docs/Robotics/ROS2/testing.mdx","sourceDirName":"Robotics/ROS2","slug":"/Robotics/ROS2/testing-ros2","permalink":"/docs/Robotics/ROS2/testing-ros2","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1734768000000,"sidebarPosition":3,"frontMatter":{"id":"testing-ros2","title":"Testing","hide_title":true,"sidebar_position":3,"last_update":{"date":"12/21/2024","author":"Kevin Shin"}},"sidebar":"noteSidebar","previous":{"title":"Perception","permalink":"/docs/Robotics/ROS2/perception"},"next":{"title":"URDF","permalink":"/docs/Robotics/ROS2/urdf"}}');var r=n(4848),o=n(8453),a=n(9489),l=n(7227);const i={id:"testing-ros2",title:"Testing",hide_title:!0,sidebar_position:3,last_update:{date:"12/21/2024",author:"Kevin Shin"}},c=void 0,d={},u=[{value:"Getting Started",id:"getting-started",level:2},{value:"Testing Frameworks for ROS2",id:"testing-frameworks-for-ros2",level:2},{value:"Unit Tests",id:"unit-tests",level:3},{value:"Integration Tests",id:"integration-tests",level:3},{value:"Library Unit Tests",id:"library-unit-tests",level:2},{value:"unittest",id:"unittest",level:3},{value:"CMakeList",id:"cmakelist",level:4},{value:"package.xml",id:"packagexml",level:4},{value:"setup.py",id:"setuppy",level:4},{value:"Test Suites",id:"test-suites",level:4},{value:"GTests",id:"gtests",level:3},{value:"Node Tests",id:"node-tests",level:2},{value:"Automation",id:"automation",level:3},{value:"Integration Tests",id:"integration-tests-1",level:2}];function p(e){const t={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(t.admonition,{type:"danger",children:[(0,r.jsx)(t.p,{children:"This has not been proof-read or modified for simpler reading yet."}),(0,r.jsx)(t.p,{children:"12/23/24"})]}),"\n",(0,r.jsx)(t.h2,{id:"getting-started",children:"Getting Started"}),"\n",(0,r.jsxs)(t.p,{children:["These are my notes from the Testing with ROS course available on ",(0,r.jsx)(t.a,{href:"https://app.theconstruct.ai",children:"The Construct"}),". The course is on ROS, but I referenced the ROS2 documentation in parallel to see the differences in testing framework and used ChatGPT to fill in the gaps. Since the simulator is on Ubuntu 16.04, I used the docker image ",(0,r.jsx)(t.code,{children:"osrf/ros:humble-desktop"})," to simulate my own ROS2 environment."]}),"\n",(0,r.jsx)(t.p,{children:"The course covers:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"Unit Testing"}),"\n",(0,r.jsx)(t.li,{children:"Node Level Tests"}),"\n",(0,r.jsx)(t.li,{children:"Integration Tests"}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"testing-frameworks-for-ros2",children:"Testing Frameworks for ROS2"}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Testing Framework"}),(0,r.jsx)(t.th,{children:"Language"}),(0,r.jsx)(t.th,{children:"Purpose"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"Google Test"})}),(0,r.jsx)(t.td,{children:"C++"}),(0,r.jsx)(t.td,{children:"Unit testing with Google Test"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"pytest"})}),(0,r.jsx)(t.td,{children:"Python"}),(0,r.jsx)(t.td,{children:"Unit testing for Python-based ROS 2 nodes and library code"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"launch_testing"})}),(0,r.jsx)(t.td,{children:"Python/C++"}),(0,r.jsx)(t.td,{children:"Testing ROS 2 launch files"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"mock, unittest"})}),(0,r.jsx)(t.td,{children:"Python"}),(0,r.jsx)(t.td,{children:"Unit testing with mock and unittest"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"ros2-benchmarks"})}),(0,r.jsx)(t.td,{children:"C++/Python"}),(0,r.jsx)(t.td,{children:"Performance testing in ROS 2"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"Cucumber, Behave"})}),(0,r.jsx)(t.td,{children:"Python"}),(0,r.jsx)(t.td,{children:"Behavior-driven testing (BDD)"})]})]})]}),"\n",(0,r.jsx)(t.h3,{id:"unit-tests",children:"Unit Tests"}),"\n",(0,r.jsxs)(t.p,{children:["There are library unit tests and ROS2 unit tests. Library unit tests do not test any ROS2-related issues and are done via ",(0,r.jsx)(t.code,{children:"unittest"})," or ",(0,r.jsx)(t.code,{children:"gtest"}),". ROS2 unit tests can be done with ",(0,r.jsx)(t.code,{children:"unittest"})," or ",(0,r.jsx)(t.code,{children:"gtest"})," and are for testing ROS2 code for a single node. It'll test its external API such as publishing or subscribing."]}),"\n",(0,r.jsx)(t.h3,{id:"integration-tests",children:"Integration Tests"}),"\n",(0,r.jsxs)(t.p,{children:["Integration tests start up multiple nodes to ensure they all work together as needed. This is done again using ",(0,r.jsx)(t.code,{children:"unittest"})," and ",(0,r.jsx)(t.code,{children:"gtest"}),"."]}),"\n",(0,r.jsxs)(a.A,{children:[(0,r.jsx)(l.A,{value:"Python",label:"Python",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-py",children:"#!/usr/bin/env python3\n\nimport rclpy\nfrom rclpy.node import Node\nfrom geometry_msgs.msg import Twist\nfrom sensor_msgs.msg import LaserScan\nimport time\n\nclass RobotControl(Node):\n\n    def __init__(self):\n        super().__init__('robot_control_node')\n        self.vel_publisher = self.create_publisher(Twist, '/cmd_vel', 10)\n        self.cmd = Twist()\n        self.ctrl_c = False\n        self.rate = self.create_rate(10)\n        self.create_timer(0.1, self.shutdownhook)\n\n    def publish_once_in_cmd_vel(self):\n        \"\"\"\n        Publish a single Twist message to ensure command receipt.\n        \"\"\"\n        while not self.ctrl_c:\n            if self.vel_publisher.get_subscription_count() > 0:\n                self.vel_publisher.publish(self.cmd)\n                self.get_logger().info(\"Command published\")\n                break\n\t     else:\n                self.rate.sleep()\n\n    def shutdownhook(self):\n        self.stop_robot()\n        self.ctrl_c = True\n\n    def stop_robot(self):\n        self.cmd.linear.x = 0.0\n        self.cmd.angular.z = 0.0\n        self.publish_once_in_cmd_vel()\n\n    def get_inputs_rotate(self):\n        angular_speed = float(input('Enter angular speed (degrees/sec): '))\n        angle = float(input('Enter angle (degrees): '))\n        clockwise = input('Rotate clockwise? (y/n): ').strip().lower() == 'y'\n        return angular_speed, angle, clockwise\n\n    def convert_degree_to_rad(self, speed_deg, angle_deg):\n        angle = float(input('Enter angle (degrees): '))\n        clockwise = input('Rotate clockwise? (y/n): ').strip().lower() == 'y'\n        return angular_speed, angle, clockwise\n\n    def convert_degree_to_rad(self, speed_deg, angle_deg):\n        return speed_deg * 3.141592653589793 / 180, angle_deg * 3.141592653589793 / 180\n\n    def rotate(self):\n        angular_speed_d, angle_d, clockwise = self.get_inputs_rotate()\n        angular_speed_r, angle_r = self.convert_degree_to_rad(angular_speed_d, angle_d)\n\n        self.cmd.angular.z = -angular_speed_r if clockwise else angular_speed_r\n\n        start_time = self.get_clock().now()\n        current_angle = 0.0\n\n        while current_angle < angle_r:\n            self.vel_publisher.publish(self.cmd)\n            elapsed_time = self.get_clock().now() - start_time\n            current_angle = angular_speed_r * elapsed_time.nanoseconds * 1e-9\n            self.rate.sleep()\n\n        self.stop_robot()\n\ndef main(args=None):\n    rclpy.init(args=args)\n    robot_control = RobotControl()\n    try:\n        robot_control.rotate()\n    except KeyboardInterrupt:\n        robot_control.get_logger().info(\"Shutting down gracefully.\")\n    finally:\n        robot_control.destroy_node()\n        rclpy.shutdown()\n\nif __name__ == '__main__':\n    main()\n"})})}),(0,r.jsx)(l.A,{value:"C++",label:"C++",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-cpp",children:'#include "rclcpp/rclcpp.hpp"\n#include "geometry_msgs/msg/twist.hpp"\n#include "sensor_msgs/msg/laser_scan.hpp"\n#include <chrono>\n#include <cmath>\n#include <iostream>\n\nusing namespace std::chrono_literals;\n\nclass RobotControl : public rclcpp::Node {\npublic:\n    RobotControl() : Node("robot_control_node"), ctrl_c_(false) {\n        vel_publisher_ = this->create_publisher<geometry_msgs::msg::Twist>("/cmd_vel", 10);\n        rate_ = this->create_wall_timer(100ms, std::bind(&Ro botControl::shutdownHook, this));\n    }\n\n    void publishOnceInCmdVel(const geometry_msgs::msg::Twist &cmd) {\n        while (!ctrl_c_) {\n            if (vel_publisher_->get_subscription_count() > 0) {\n                vel_publisher_->publish(cmd);\n                RCLCPP_INFO(this->get_logger(), "Command published");\n                break;\n            } else {\n                std::this_thread::sleep_for(std::chrono::milliseconds(100));\n            }\n        }\n    }\n\n    void stopRobot() {\n        geometry_msgs::msg::Twist cmd;\n        cmd.linear.x = 0.0;\n        cmd.angular.z = 0.0;\n        publishOnceInCmdVel(cmd);\n    }\n\n    std::tuple<double, double, bool> getInputsRotate() {\n        double angular_speed, angle;\n        std::string clockwise_input;\n        std::cout << "Enter angular speed (degrees/sec): ";\n        std::cin >> angular_speed;\n        std::cout << "Enter angle (degrees): ";\n        std::cin >> angle;\n        std::cout << "Rotate clockwise? (y/n): ";\n        std::cin >> clockwise_input;\n        bool clockwise = (clockwise_input == "y" || clockwise_input == "Y");\n        return std::make_tuple(angular_speed, angle, clockwise);\n    }\n\n    std::pair<double, double> convertDegreeToRad(double speed_deg, double angle_deg) {\n        double speed_rad = speed_deg * M_PI / 180.0;\n        double angle_rad = std::abs(angle_deg) * M_PI / 180.0;\n        return {speed_rad, angle_rad};\n    }\n\n    void rotate() {\n        auto [angular_speed_d, angle_d, clockwise] = getInputsRotate();\n        auto [angular_speed_r, angle_r] = convertDegreeToRad(angular_speed_d, angle_d);\n\n        geometry_msgs::msg::Twist cmd;\n        cmd.angular.z = clockwise ? -angular_speed_r : angular_speed_r;\n\n        auto start_time = this->now();\n        double current_angle = 0.0;\n\n        while (current_angle < angle_r && rclcpp::ok()) {\n            vel_publisher_->publish(cmd);\n            auto elapsed_time = this->now() - start_time;\n            current_angle = angular_speed_r * elapsed_time.seconds();\n            std::this_thread::sleep_for(std::chrono::milliseconds(100));\n        }\n\n        stopRobot();\n    }\n\nprivate:\n    void shutdownHook() {\n        stopRobot();\n        ctrl_c_ = true;\n    }\n\n    rclcpp::Publisher<geometry_msgs::msg::Twist>::SharedPtr vel_publisher_;\n    rclcpp::TimerBase::SharedPtr rate_;\n    bool ctrl_c_;\n};\n\nint main(int argc, char *argv[]) {\n    rclcpp::init(argc, argv);\n    auto robot_control = std::make_shared<RobotControl>();\n    try {\n        robot_control->rotate();\n    } catch (const std::exception &e) {\n        RCLCPP_INFO(robot_control->get_logger(), "Shutting down gracefully.");\n    } catch (...) {\n        RCLCPP_INFO(robot_control->get_logger(), "Shutting down unexpectedly.");\n    }\n    rclcpp::shutdown();\n    return 0;\n}\n'})})})]}),"\n",(0,r.jsx)(t.h2,{id:"library-unit-tests",children:"Library Unit Tests"}),"\n",(0,r.jsx)(t.h3,{id:"unittest",children:"unittest"}),"\n",(0,r.jsx)(t.p,{children:"We'll be using Pytest first to demostrate how we can test our code."}),"\n",(0,r.jsx)(t.p,{children:"How can we ensure that the functionality of the node is behaving correctly? In other words, are the core components of the node functioning correctly? For example, are we converting correctly?"}),"\n",(0,r.jsx)(t.p,{children:"Firstly, in order to set up library unit tests, we must first create a test directory within our package and create our tests in there."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-py",children:'#!/usr/bin/env python3\n\nimport unittest # Testing framework\nimport rclpy\nfrom robot_control_py.robot_control import RobotControl  # Adjust the import based on your ROS 2 package structure\n\nclass TestRobotControl(unittest.TestCase):\n\n    @classmethod\n    def setUpClass(cls): # Part of the unittest framework where we override to specify logic when we instantiate the Test Node.\n        """Initialize rclpy once for the entire test class."""\n        rclpy.init()\n\n    @classmethod\n    def tearDownClass(cls): # Part of the unittest framework where we override to specify logic for shutting down\n        """Shutdown rclpy once after all tests are complete."""\n        rclpy.shutdown()\n\n    def setUp(self): # Applies to each individual test cases and is ran before each test.\n        """Set up the test environment by creating a RobotControl node."""\n        self.rc = RobotControl()\n\n    def tearDown(self): # Applies to each after individual test case.\n        """Clean up resources after each test."""\n        self.rc.destroy_node()\n\n    def test_deg_rad_conversion(self):\n        """Test degree-to-radian conversion."""\n        speed, angle = self.rc.convert_degree_to_rad(60, 90)\n        self.assertAlmostEqual(speed, 1.0472, places=4, msg="Speed conversion failed")\n        self.assertAlmostEqual(angle, 1.57, places=2, msg="Angle conversion failed")\n\nif __name__ == \'__main__\':\n    unittest.main()\n'})}),"\n",(0,r.jsx)(t.p,{children:"Before we can actually start testing though, we have to set up our ROS2 environment so that it knows we have tests. A cool thing is that you can actually run this using just the python interpreter. If you wanna integrate it within the ROS2 environment, we must first configure the necessary files. If it's a C++ package, that means the CMakeLists and package.xml, while if it's a python package, it's setup.py and package.xml."}),"\n",(0,r.jsx)(t.h4,{id:"cmakelist",children:"CMakeList"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-txt",children:"if(BUILD_TESTING)\n    find_package(ament_cmake_pytest REQUIRED)\n    ament_add_pytest_test(test_robot_control test/test_robot_control.py)\nendif()\n"})}),"\n",(0,r.jsx)(t.h4,{id:"packagexml",children:"package.xml"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-txt",children:"<test_depend>ament_cmake_pytest</test_depend>\n"})}),"\n",(0,r.jsx)(t.h4,{id:"setuppy",children:"setup.py"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-py",children:"(os.path.join('share', package_name, 'test'), glob('test/*.py'))\n"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"python3 test_robot_control.py # Run without ROS2 environment\ncolcon test --packages-select <package_name> # Run with ROS2 environment\ncolcon test-result --all --verbose # Run to see results\n"})}),"\n",(0,r.jsx)(t.p,{children:"The outputs for success and failing:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-text",children:'.\n----------------------------------------------------------------------\nRan 1 test in 0.024s\n\nOK\n\n######################################################################\n\nF\n======================================================================\nFAIL: test_deg_rad_conversion (__main__.TestRobotControl)\nTest degree-to-radian conversion.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File "/ros2_ws/src/robot_control_py/test/test_robot_control.py", line 30, in test_deg_rad_conversion\n    self.assertAlmostEqual(speed, 1.0472, places=4, msg="Speed conversion failed")\nAssertionError: 0.5235987755982988 != 1.0472 within 4 places (0.5236012244017011 difference) : Speed conversion failed\nFinished <<< robot_control_py [0.63s]\nSummary: 1 package finished [0.83s]\nroot@9f3977f822c1:/ros2_ws# colcon test-result --verbose\nSummary: 1 test, 0 errors, 0 failures, 0 skipped\n'})}),"\n",(0,r.jsx)(t.h4,{id:"test-suites",children:"Test Suites"}),"\n",(0,r.jsx)(t.p,{children:"The unittest provides what's known as a Test Suite which lets us write separate test cases for different bits of functionality. Test suites are composed of test cases or even other test suites."}),"\n",(0,r.jsxs)(t.p,{children:["We can create a test suite by creating a new python file called ",(0,r.jsx)(t.code,{children:"test_robot_control_cases.py"})," and writing these lines of code:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-py",children:'#!/usr/bin/env python3\n\nimport unittest\nimport rclpy\nfrom robot_control_py.robot_control import RobotControl\n\nclass TestCaseA(unittest.TestCase):\n\n    @classmethod\n    def setUpClass(cls):\n        rclpy.init()\n\n    @classmethod\n    def tearDownClass(cls):\n        rclpy.shutdown()\n\n    def setUp(self):\n        self.rc = RobotControl()\n\n    def test_case_a(self):\n        speed, angle = self.rc.convert_degree_to_rad(60, 90)\n        self.assertAlmostEqual(angle, 1.57, places=2, msg="Test Case A failed")\n\nclass TestCaseB(unittest.TestCase):\n    @classmethod\n    def setUpClass(cls):\n        rclpy.init()\n\n    @classmethod\n    def tearDownClass(cls):\n        rclpy.shutdown()\n\n    def setUp(self):\n        self.rc = RobotControl()\n\n    def test_case_b(self):\n        speed, angle = self.rc.convert_degree_to_rad(60, -90)\n        self.assertAlmostEqual(angle, 1.57, places=2, msg="Test Case B failed")\n'})}),"\n",(0,r.jsx)(t.p,{children:"We need a runner for this which runs these tests."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-py",children:"import unittest\nfrom test_robot_control_cases import TestCaseA, TestCaseB\n\nif __name__ == '__main__':\n    suite = unittest.TestSuite()\n    suite.addTest(TestCaseA('test_case_a'))\n    suite.addTest(TestCaseB('test_case_b'))\n    runner = unittest.TextTestRunner()\n    runner.run(suite)\n"})}),"\n",(0,r.jsxs)(t.p,{children:["Running this with ",(0,r.jsx)(t.code,{children:"python3 run_tests.py"})," will run both these test cases. If you want to integrate the runner, simply remove the runner file and make the main function inside of the cases file.\nOutput:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:'root@9f3977f822c1:/ros2_ws/src/robot_control_py/test# python3 run_tests.py\n.F\n======================================================================\nFAIL: test_case_b (test_robot_control_cases.TestCaseB)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File "/ros2_ws/src/robot_control_py/test/test_robot_control_cases.py", line 39, in test_case_b\n    self.assertAlmostEqual(angle, 1.57, places=2, msg="Test Case B failed")\nAssertionError: -1.5707963267948966 != 1.57 within 2 places (3.140796326794897 difference) : Test Case B failed                                                                                             ----------------------------------------------------------------------\nRan 2 tests in 0.054s\nFAILED (failures=1)\n'})}),"\n",(0,r.jsx)(t.p,{children:"The tests are failing because we only want positive angles but are accounting for negative angles. We can fix it by adjusting our core code and rebuilding, and doing so will pass our tests."}),"\n",(0,r.jsx)(t.admonition,{type:"info",children:(0,r.jsxs)(t.p,{children:["If you only want to see tests for one package, run\n",(0,r.jsx)(t.code,{children:"colcon test-result --test-result-base build/<package_name> "})]})}),"\n",(0,r.jsx)(t.p,{children:"If you want to color code it, run this command or put it inside a script file:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:'#!/bin/bash\ncolcon test --packages-select <package_name> --pytest-args="--color=yes" --pytest-args="-v" --event-handlers console_direct+\n\nroot@9f3977f822c1:/ros2_ws# ./tests.sh\nStarting >>> robot_control_py\n============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-6.2.5, py-1.10.0, pluggy-0.13.0 -- /usr/bin/python3\ncachedir: /ros2_ws/build/robot_control_py/.pytest_cache\nrootdir: /ros2_ws/src/robot_control_py, configfile: pytest.ini\nplugins: ament-flake8-0.12.11, ament-pep257-0.12.11, ament-xmllint-0.12.11, ament-copyright-0.12.11, ament-lint-0.12.11, launch-testing-ros-0.19.8, launch-testing-1.0.7, colcon-core-0.18.4\ncollecting ...\ncollected 3 items\ntest/test_robot_control_cases.py::TestCaseA::test_case_a PASSED          [ 33%]\ntest/test_robot_control_cases.py::TestCaseB::test_case_b PASSED          [ 66%]\ntest/test_robot_control_cases.py::TestCaseB::test_case_string PASSED     [100%]\n-------- generated xml file: /ros2_ws/build/robot_control_py/pytest.xml --------\n============================== 3 passed in 0.12s ===============================\nFinished <<< robot_control_py [0.63s]                                                                                                                                                                       Summary: 1 package finished [0.83s]\n'})}),"\n",(0,r.jsx)(t.h3,{id:"gtests",children:"GTests"}),"\n",(0,r.jsx)(t.p,{children:"ROS2 documentation for integrating GTests is minimal, will come back to it."}),"\n",(0,r.jsx)(t.h2,{id:"node-tests",children:"Node Tests"}),"\n",(0,r.jsxs)(t.p,{children:["Node tests are basically to check whether the functionality of ROS2 is correct. This means checking the API such as topics, services, and etc. This is done with ",(0,r.jsx)(t.code,{children:"launch_testing"})," alongside ",(0,r.jsx)(t.code,{children:"unittest/gtest"})," We want to have node tests because we want to ensure a publisher is correctly publishing the expected values on the expected topic. We also want to verify that a ROS2 service provides the correct response. For low stake projects, tests may not be important, but what if your project is a high-stake project involving costly parts? Simulations may help, but tests can also help."]}),"\n",(0,r.jsxs)(t.p,{children:["We'll showcase how we can test a node by extending our RobotControl from the unit test. Specifically, we'll be checking to see if our ",(0,r.jsx)(t.code,{children:"RobotControl"})," is publishing to ",(0,r.jsx)(t.code,{children:"/cmd_vel"}),"."]}),"\n",(0,r.jsxs)(a.A,{children:[(0,r.jsx)(l.A,{value:"Python",label:"Python",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-py",children:"#!/usr/bin/env python3                                                                                                                                                                                          \n                                                                                                                                                                                                                \nfrom robot_control_py.robot_control import RobotControl                                                                                                                                                         \nimport rclpy                                                                                                                                                                                                    \nfrom rclpy.node import Node                                                                                                                                                                                     \nimport unittest                                                                                                                                                                                                 \nfrom geometry_msgs.msg import Twist                                                                                                                                                                             \nimport time                                                                                                                                                                                                     \n                                                                                                                                                                                                                \nclass TestRobotControl(unittest.TestCase):                                                                                                                                                                      \n                                                                                                                                                                                                                \n    @classmethod                                                                                                                                                                                                \n    def setUpClass(cls):                                                                                                                                                                                        \n        rclpy.init()                                                                                                                                                                                            \n                                                                                                                                                                                                                \n    @classmethod                                                                                                                                                                                                \n    def tearDownClass(cls):                                                                                                                                                                                     \n        rclpy.shutdown()                                                                                                                                                                                        \n                                                                                                                                                                                                                \n    def setUp(self):                                                                                                                                                                                            \n        self.node = rclpy.create_node('test_robot_control_node')                                                                                                                                                     \n        self.rc = RobotControl()                                                                                                                                                                                \n        self.success = False                                                                                                                                                                                    \n                                                                                                                                                                                                                \n    def callback(self, msg):                                                                                                                                                                                    \n        print(f\"Received Angular Speed: {msg.angular.z}\")                                                                                                                                                       \n        self.success = msg.angular.z == 1.0                                                                                                                                                                     \n                                                                                                                                                                                                                \n    def test_publish_cmd_vel(self):                                                                                                                                                                             \n        test_sub = self.node.create_subscription(Twist, \"/cmd_vel\", self.callback, 10)                                                                                                                          \n        self.rc.cmd.angular.z = 1.0                                                                                                                                                                             \n        self.rc.publish_once_in_cmd_vel()                                                                                                                                                                       \n        timeout_t = time.time() + 10.0  # 10 seconds                                                                                                                                                            \n        rclpy.spin_once(self.node, timeout_sec=0.1)                                                                                                                                                             \n        while not self.success and time.time() < timeout_t:                                                                                                                                                     \n            rclpy.spin_once(self.node, timeout_sec=0.1)                                                                                                                                                         \n        self.assertTrue(self.success)                                                                                                                                                                           \n                                                                                                                                                                                                                \n    def tearDown(self):                                                                                                                                                                                         \n        self.node.destroy_node()                                                                                                                                                                                \n                                                                                                                                                                                                                \nif __name__ == '__main__':                                                                                                                                                                                      \n    unittest.main()                       \n"})})}),(0,r.jsx)(l.A,{value:"C++",label:"C++"})]}),"\n",(0,r.jsx)(t.p,{children:"There isn't much difference except now you're creating a node for whatever purpose and seeing if the ROS2 library is functioning. In our case, we're subscribing to /cmd_vel, and seeing if we do get a message back."}),"\n",(0,r.jsx)(t.p,{children:"Using our built in bash script, we can see that the tests indeed do work. You can also just run it with the python interpreter."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"python3 test_robot_control_node.py\n[INFO] [1735008562.793690945] [robot_control_node]: Command published                                                                                                                                           \nReceived Angular Speed: 1.0                                                                                                                                                                                     \n.                                                                                                                                                                                                               \n----------------------------------------------------------------------                                                                                                                                          \nRan 1 test in 0.036s                                                                                                                                                                                            \n                                                                                                                                                                                                                \nOK\n\n======================================================================\n./tests.sh robot_control_py\n./tests.sh robot_control_py                                                                                                                                                         \nStarting >>> robot_control_py                                                                                                                                                                                   \n============================= test session starts ==============================                                                                                                                                \nplatform linux -- Python 3.10.12, pytest-6.2.5, py-1.10.0, pluggy-0.13.0 -- /usr/bin/python3                                                                                                                    \ncachedir: /ros2_ws/build/robot_control_py/.pytest_cache                                                                                                                                                         \nrootdir: /ros2_ws/src/robot_control_py, configfile: pytest.ini                                                                                                                                                  \nplugins: ament-flake8-0.12.11, ament-pep257-0.12.11, ament-xmllint-0.12.11, ament-copyright-0.12.11, ament-lint-0.12.11, launch-testing-ros-0.19.8, launch-testing-1.0.7, colcon-core-0.18.4                    \ncollecting ...                                                                                                                                                                                                  \ncollected 4 items                                                                                                                                                                                               \n                                                                                                                                                                                                                \ntest/test_robot_control_cases.py::TestCaseA::test_case_a PASSED          [ 25%]                                                                                                                                 \ntest/test_robot_control_cases.py::TestCaseB::test_case_b PASSED          [ 50%]                                                                                                                                 \ntest/test_robot_control_cases.py::TestCaseB::test_case_string PASSED     [ 75%]                                                                                                                                 \ntest/test_robot_control_node.py::TestRobotControl::test_publish_cmd_vel PASSED [100%]                                                                                                                           \n                                                                                                                                                                                                                \n-------- generated xml file: /ros2_ws/build/robot_control_py/pytest.xml --------                                                                                                                                \n============================== 4 passed in 0.15s ===============================                                                                                                                                \nFinished <<< robot_control_py [0.67s]                                                                                                                                                                           \n                                                                                                                                                                                                                \nSummary: 1 package finished [0.89s]\n"})}),"\n",(0,r.jsx)(t.h3,{id:"automation",children:"Automation"}),"\n",(0,r.jsx)(t.p,{children:"There's actually a way simpler way where we just modify the CMakeLists and package.xml, and remove all the unnecessary stuff from main. From the ROS2 documentation,"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-txt",children:'cmake_minimum_required(VERSION 3.8)\nproject(app)\n\n########\n# test #\n########\n\nif(BUILD_TESTING)\n  # Integration tests\n  find_package(ament_cmake_ros REQUIRED)\n  find_package(launch_testing_ament_cmake REQUIRED)\n  function(add_ros_isolated_launch_test path)\n    set(RUNNER "${ament_cmake_ros_DIR}/run_test_isolated.py")\n    add_launch_test("${path}" RUNNER "${RUNNER}" ${ARGN})\n  endfunction()\n  add_ros_isolated_launch_test(test/<any_test>.py) # For each test, you add another line\nendif()\n'})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-xml",children:"<test_depend>ament_cmake_ros</test_depend>\n<test_depend>launch</test_depend>\n<test_depend>launch_ros</test_depend>\n<test_depend>launch_testing</test_depend>\n<test_depend>launch_testing_ament_cmake</test_depend>\n<test_depend>rclpy</test_depend>\n<test_depend>turtlesim</test_depend>\n"})}),"\n",(0,r.jsxs)(t.p,{children:["And you can just run ",(0,r.jsx)(t.code,{children:"colcon test"})," to get your tests. I came upon this after attempting to figure out how to create launch files for testing but seems to be a bit complex for my level. Will come back to it."]}),"\n",(0,r.jsx)(t.h2,{id:"integration-tests-1",children:"Integration Tests"})]})}function h(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},7227:(e,t,n)=>{n.d(t,{A:()=>a});n(6540);var s=n(4164);const r={tabItem:"tabItem_Ymn6"};var o=n(4848);function a(e){let{children:t,hidden:n,className:a}=e;return(0,o.jsx)("div",{role:"tabpanel",className:(0,s.A)(r.tabItem,a),hidden:n,children:t})}},9489:(e,t,n)=>{n.d(t,{A:()=>v});var s=n(6540),r=n(4164),o=n(4245),a=n(6347),l=n(6494),i=n(2814),c=n(5167),d=n(9900);function u(e){return s.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,s.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function p(e){const{values:t,children:n}=e;return(0,s.useMemo)((()=>{const e=t??function(e){return u(e).map((e=>{let{props:{value:t,label:n,attributes:s,default:r}}=e;return{value:t,label:n,attributes:s,default:r}}))}(n);return function(e){const t=(0,c.XI)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function h(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function _(e){let{queryString:t=!1,groupId:n}=e;const r=(0,a.W6)(),o=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,i.aZ)(o),(0,s.useCallback)((e=>{if(!o)return;const t=new URLSearchParams(r.location.search);t.set(o,e),r.replace({...r.location,search:t.toString()})}),[o,r])]}function g(e){const{defaultValue:t,queryString:n=!1,groupId:r}=e,o=p(e),[a,i]=(0,s.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!h({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const s=n.find((e=>e.default))??n[0];if(!s)throw new Error("Unexpected error: 0 tabValues");return s.value}({defaultValue:t,tabValues:o}))),[c,u]=_({queryString:n,groupId:r}),[g,m]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[r,o]=(0,d.Dv)(n);return[r,(0,s.useCallback)((e=>{n&&o.set(e)}),[n,o])]}({groupId:r}),f=(()=>{const e=c??g;return h({value:e,tabValues:o})?e:null})();(0,l.A)((()=>{f&&i(f)}),[f]);return{selectedValue:a,selectValue:(0,s.useCallback)((e=>{if(!h({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);i(e),u(e),m(e)}),[u,m,o]),tabValues:o}}var m=n(1062);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var b=n(4848);function y(e){let{className:t,block:n,selectedValue:s,selectValue:a,tabValues:l}=e;const i=[],{blockElementScrollPositionUntilNextRender:c}=(0,o.a_)(),d=e=>{const t=e.currentTarget,n=i.indexOf(t),r=l[n].value;r!==s&&(c(t),a(r))},u=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=i.indexOf(e.currentTarget)+1;t=i[n]??i[0];break}case"ArrowLeft":{const n=i.indexOf(e.currentTarget)-1;t=i[n]??i[i.length-1];break}}t?.focus()};return(0,b.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.A)("tabs",{"tabs--block":n},t),children:l.map((e=>{let{value:t,label:n,attributes:o}=e;return(0,b.jsx)("li",{role:"tab",tabIndex:s===t?0:-1,"aria-selected":s===t,ref:e=>i.push(e),onKeyDown:u,onClick:d,...o,className:(0,r.A)("tabs__item",f.tabItem,o?.className,{"tabs__item--active":s===t}),children:n??t},t)}))})}function x(e){let{lazy:t,children:n,selectedValue:o}=e;const a=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=a.find((e=>e.props.value===o));return e?(0,s.cloneElement)(e,{className:(0,r.A)("margin-top--md",e.props.className)}):null}return(0,b.jsx)("div",{className:"margin-top--md",children:a.map(((e,t)=>(0,s.cloneElement)(e,{key:t,hidden:e.props.value!==o})))})}function w(e){const t=g(e);return(0,b.jsxs)("div",{className:(0,r.A)("tabs-container",f.tabList),children:[(0,b.jsx)(y,{...t,...e}),(0,b.jsx)(x,{...t,...e})]})}function v(e){const t=(0,m.A)();return(0,b.jsx)(w,{...e,children:u(e.children)},String(t))}},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>l});var s=n(6540);const r={},o=s.createContext(r);function a(e){const t=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(o.Provider,{value:t},e.children)}}}]);