"use strict";(self.webpackChunkkevshin2002=self.webpackChunkkevshin2002||[]).push([[3024],{6511:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"Robotics/ROS2/testing-ros2","title":"Tests","description":"Getting Started","source":"@site/docs/Robotics/ROS2/testing.mdx","sourceDirName":"Robotics/ROS2","slug":"/Robotics/ROS2/testing-ros2","permalink":"/docs/Robotics/ROS2/testing-ros2","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1734595200000,"sidebarPosition":3,"frontMatter":{"id":"testing-ros2","title":"Tests","hide_title":true,"sidebar_position":3,"last_update":{"date":"12/19/2024","author":"Kevin Shin"}},"sidebar":"noteSidebar","previous":{"title":"Perception","permalink":"/docs/Robotics/ROS2/perception"},"next":{"title":"Mathematics","permalink":"/docs/Mathematics/"}}');var r=n(4848),o=n(8453);const i={id:"testing-ros2",title:"Tests",hide_title:!0,sidebar_position:3,last_update:{date:"12/19/2024",author:"Kevin Shin"}},l=void 0,a={},c=[{value:"Getting Started",id:"getting-started",level:2},{value:"Testing Frameworks for ROS2",id:"testing-frameworks-for-ros2",level:2},{value:"Unit Tests",id:"unit-tests",level:3},{value:"Integration Tests",id:"integration-tests",level:3},{value:"Library Unit Tests",id:"library-unit-tests",level:2},{value:"CMakeList",id:"cmakelist",level:4},{value:"package.xml",id:"packagexml",level:4},{value:"setup.py",id:"setuppy",level:4}];function d(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h2,{id:"getting-started",children:"Getting Started"}),"\n",(0,r.jsxs)(t.p,{children:["These are my notes from the Testing with ROS course available on ",(0,r.jsx)(t.a,{href:"https://app.theconstruct.ai",children:"The Construct"}),". The course is on ROS, but I referenced the ROS2 documentation in parallel to see the differences in testing framework and used ChatGPT to fill in the gaps. Since the simulator is on Ubuntu 16.04, I used the docker image ",(0,r.jsx)(t.code,{children:"osrf/ros:humble-desktop"})," to simulate my own ROS2 environment."]}),"\n",(0,r.jsx)(t.p,{children:"The course covers:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"Unit Testing"}),"\n",(0,r.jsx)(t.li,{children:"Node Level Tests"}),"\n",(0,r.jsx)(t.li,{children:"Integration Tests"}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"testing-frameworks-for-ros2",children:"Testing Frameworks for ROS2"}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Testing Framework"}),(0,r.jsx)(t.th,{children:"Language"}),(0,r.jsx)(t.th,{children:"Purpose"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"ament_cmake"})}),(0,r.jsx)(t.td,{children:"C++"}),(0,r.jsx)(t.td,{children:"Testing with Google Test (gtest/gmock)"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"ament_python"})}),(0,r.jsx)(t.td,{children:"Python"}),(0,r.jsx)(t.td,{children:"Testing with pytest"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"Google Test"})}),(0,r.jsx)(t.td,{children:"C++"}),(0,r.jsx)(t.td,{children:"Unit testing with Google Test"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"pytest"})}),(0,r.jsx)(t.td,{children:"Python"}),(0,r.jsx)(t.td,{children:"Unit testing for Python-based ROS 2 nodes"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"launch_testing"})}),(0,r.jsx)(t.td,{children:"Python/C++"}),(0,r.jsx)(t.td,{children:"Testing ROS 2 launch files"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"mock, unittest"})}),(0,r.jsx)(t.td,{children:"Python"}),(0,r.jsx)(t.td,{children:"Unit testing with mock and unittest"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"ros2-benchmarks"})}),(0,r.jsx)(t.td,{children:"C++/Python"}),(0,r.jsx)(t.td,{children:"Performance testing in ROS 2"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"Cucumber, Behave"})}),(0,r.jsx)(t.td,{children:"Python"}),(0,r.jsx)(t.td,{children:"Behavior-driven testing (BDD)"})]})]})]}),"\n",(0,r.jsx)(t.h3,{id:"unit-tests",children:"Unit Tests"}),"\n",(0,r.jsxs)(t.p,{children:["There are library unit tests and ROS2 unit tests. Library unit tests do not test any ROS2-related issues and are done via ",(0,r.jsx)(t.code,{children:"unittest"})," or ",(0,r.jsx)(t.code,{children:"gtest"}),". ROS2 unit tests can be done with ",(0,r.jsx)(t.code,{children:"unittest"})," or ",(0,r.jsx)(t.code,{children:"gtest"})," and are for testing ROS2 code for a single node. It'll test its external API such as publishing or subscribing."]}),"\n",(0,r.jsx)(t.h3,{id:"integration-tests",children:"Integration Tests"}),"\n",(0,r.jsxs)(t.p,{children:["Integration tests start up multiple nodes to ensure they all work together as needed. This is done again using ",(0,r.jsx)(t.code,{children:"unittest"})," and ",(0,r.jsx)(t.code,{children:"gtest"}),"."]}),"\n",(0,r.jsx)(t.h2,{id:"library-unit-tests",children:"Library Unit Tests"}),"\n",(0,r.jsx)(t.p,{children:"We'll be using the code below to learn about testing in ROS2."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-py",children:"#!/usr/bin/env python3\n\nimport rclpy\nfrom rclpy.node import Node\nfrom geometry_msgs.msg import Twist\nfrom sensor_msgs.msg import LaserScan\nimport time\n\nclass RobotControl(Node):\n\n    def __init__(self):\n        super().__init__('robot_control_node')\n        self.vel_publisher = self.create_publisher(Twist, '/cmd_vel', 10)\n        self.cmd = Twist()\n        self.ctrl_c = False\n        self.rate = self.create_rate(10)\n        self.create_timer(0.1, self.shutdownhook)\n\n    def publish_once_in_cmd_vel(self):\n        \"\"\"\n        Publish a single Twist message to ensure command receipt.\n        \"\"\"\n        while not self.ctrl_c:\n            if self.vel_publisher.get_subscription_count() > 0:\n                self.vel_publisher.publish(self.cmd)\n                self.get_logger().info(\"Command published\")\n                break\n            else:\n                self.rate.sleep()\n\n    def shutdownhook(self):\n        self.stop_robot()\n        self.ctrl_c = True\n\n    def stop_robot(self):\n        self.cmd.linear.x = 0.0\n        self.cmd.angular.z = 0.0\n        self.publish_once_in_cmd_vel()\n\n    def get_inputs_rotate(self):\n        angular_speed = float(input('Enter angular speed (degrees/sec): '))\n        angle = float(input('Enter angle (degrees): '))\n        clockwise = input('Rotate clockwise? (y/n): ').strip().lower() == 'y'\n        return angular_speed, angle, clockwise\n\n    def convert_degree_to_rad(self, speed_deg, angle_deg):\n        return speed_deg * 3.141592653589793 / 180, angle_deg * 3.141592653589793 / 180\n\n    def rotate(self):\n        angular_speed_d, angle_d, clockwise = self.get_inputs_rotate()\n        angular_speed_r, angle_r = self.convert_degree_to_rad(angular_speed_d, angle_d)\n\n        self.cmd.angular.z = -angular_speed_r if clockwise else angular_speed_r\n\n        start_time = self.get_clock().now()\n        current_angle = 0.0\n\n        while current_angle < angle_r:\n            self.vel_publisher.publish(self.cmd)\n            elapsed_time = self.get_clock().now() - start_time\n            current_angle = angular_speed_r * elapsed_time.nanoseconds * 1e-9\n            self.rate.sleep()\n\n        self.stop_robot()\n\ndef main(args=None):\n    rclpy.init(args=args)\n    robot_control = RobotControl()\n    try:\n        robot_control.rotate()\n    except KeyboardInterrupt:\n        robot_control.get_logger().info(\"Shutting down gracefully.\")\n    finally:\n        robot_control.destroy_node()\n        rclpy.shutdown()\n\nif __name__ == '__main__':\n    main()\n"})}),"\n",(0,r.jsx)(t.p,{children:"In order to set up library unit tests, we have to create a test directory in our package. We can then create a random file. The code to test the above code for core python functionality is below."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-py",children:'#!/usr/bin/env python3\n\nimport unittest\nimport rclpy\nfrom robot_control_py.robot_control import RobotControl  # Adjust the import based on your ROS 2 package structure\n\nclass TestRobotControl(unittest.TestCase):\n\n    @classmethod\n    def setUpClass(cls): # Part of the unittest framework where we override to specify logic when we instantiate the Test Node.\n        """Initialize rclpy once for the entire test class."""\n        rclpy.init()\n\n    @classmethod\n    def tearDownClass(cls): # Part of the unittest framework where we override to specify logic for shutting down\n        """Shutdown rclpy once after all tests are complete."""\n        rclpy.shutdown()\n\n    def setUp(self): # Applies to each individual test cases and is ran before each test.\n        """Set up the test environment by creating a RobotControl node."""\n        self.rc = RobotControl()\n\n    def tearDown(self): # Applies to each after individual test case.\n        """Clean up resources after each test."""\n        self.rc.destroy_node()\n\n    def test_deg_rad_conversion(self):\n        """Test degree-to-radian conversion."""\n        speed, angle = self.rc.convert_degree_to_rad(60, 90)\n        self.assertAlmostEqual(speed, 1.0472, places=4, msg="Speed conversion failed")\n        self.assertAlmostEqual(angle, 1.57, places=2, msg="Angle conversion failed")\n\nif __name__ == \'__main__\':\n    unittest.main()\n'})}),"\n",(0,r.jsx)(t.p,{children:"We can run this with just the python interpreter but we can also integrate it to our ROS2 package by configuring our CMakeLists, package.xml, and setup.py file."}),"\n",(0,r.jsx)(t.h4,{id:"cmakelist",children:"CMakeList"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-txt",children:"if(BUILD_TESTING)\n    find_package(ament_cmake_pytest REQUIRED)\n    ament_add_pytest_test(test_robot_control test/test_robot_control.py)\nendif()\n"})}),"\n",(0,r.jsx)(t.h4,{id:"packagexml",children:"package.xml"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-txt",children:"<test_depend>ament_cmake_pytest</test_depend>\n"})}),"\n",(0,r.jsx)(t.h4,{id:"setuppy",children:"setup.py"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-py",children:"(os.path.join('share', package_name, 'test'), glob('test/*.py'))\n"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"python3 test_robot_control.py # Run without ROS2 environment\ncolcon test --packages-select <package_name> # Run with ROS2 environment\n"})}),"\n",(0,r.jsx)(t.p,{children:"The outputs for success and failing:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-text",children:'.                                                                                                                                                                                                               \n----------------------------------------------------------------------                                                                                                                                          \nRan 1 test in 0.024s                                                                                                                                                                                            \n                                                                                                                                                                                                                \nOK          \n\n######################################################################\n\nF                                                                                                                                                                                                               \n======================================================================                                                                                                                                          \nFAIL: test_deg_rad_conversion (__main__.TestRobotControl)                                                                                                                                                       \nTest degree-to-radian conversion.                                                                                                                                                                               \n----------------------------------------------------------------------                                                                                                                                          \nTraceback (most recent call last):                                                                                                                                                                              \n  File "/ros2_ws/src/robot_control_py/test/test_robot_control.py", line 30, in test_deg_rad_conversion                                                                                                          \n    self.assertAlmostEqual(speed, 1.0472, places=4, msg="Speed conversion failed")                                                                                                                              \nAssertionError: 0.5235987755982988 != 1.0472 within 4 places (0.5236012244017011 difference) : Speed conversion failed                                                                                          \n                                                                                                                                                                                                                \n----------------------------------------------------------------------                                                                                                                                          \nRan 1 test in 0.023s                                                                                                                                                                                            \n                                                                                                                                                                                                                \nFAILED (failures=1)\n'})}),"\n",(0,r.jsx)(t.p,{children:"If ran with colcon:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"colcon test --packages-select robot_control_py                                                                                                                                      \nStarting >>> robot_control_py                                                                                                                                                                               \nFinished <<< robot_control_py [0.63s]                                                                                                                                                                                                                                                                                                                                                                        \nSummary: 1 package finished [0.83s]                                                                                                                                                                         \nroot@9f3977f822c1:/ros2_ws# colcon test-result --verbose                                                                                                                                                    \nSummary: 1 test, 0 errors, 0 failures, 0 skipped  \n"})})]})}function h(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>l});var s=n(6540);const r={},o=s.createContext(r);function i(e){const t=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(o.Provider,{value:t},e.children)}}}]);